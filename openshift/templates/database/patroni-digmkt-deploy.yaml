apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: |-
      Patroni Postgresql database cluster, with persistent storage.
    iconClass: icon-postgresql
    openshift.io/display-name: Patroni Postgresql (Persistent)
    openshift.io/long-description: This template deploys a patroni postgresql HA
      cluster with persistent storage (Service, StatefulSet).
    tags: postgresql
  name: patroni-pgsql-persistent
labels:
  app: ${NAME}-${APP_GROUP}-${TAG_NAME}
  phase: deploy
  app.kubernetes.io/instance: ${NAME}-${APP_GROUP}-${TAG_NAME}
  app.kubernetes.io/component: database
  app.kubernetes.io/name: patroni
  app.kubernetes.io/managed-by: template

objects:
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      cluster-name: ${NAME}-${APP_GROUP}-${TAG_NAME}
    name: ${NAME}-${APP_GROUP}-${TAG_NAME}
  spec:
    ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      cluster-name: ${NAME}-${APP_GROUP}-${TAG_NAME}
      role: master
      app.kubernetes.io/name: patroni
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: null
    generation: 3
    labels:
      cluster-name: ${NAME}-${APP_GROUP}-${TAG_NAME}
    name: ${NAME}-${APP_GROUP}-${TAG_NAME}
  spec:
    podManagementPolicy: OrderedReady
    replicas: ${{REPLICAS}}
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        statefulset: ${NAME}-${APP_GROUP}-${TAG_NAME}
    serviceName: ${NAME}-${APP_GROUP}-${TAG_NAME}
    template:
      metadata:
        creationTimestamp: null
        labels:
          statefulset: ${NAME}-${APP_GROUP}-${TAG_NAME}
          cluster-name: ${NAME}-${APP_GROUP}-${TAG_NAME}
          app.kubernetes.io/name: patroni
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: statefulset
                  operator: In
                  values:
                  - ${NAME}-${APP_GROUP}-${TAG_NAME}
              topologyKey: "kubernetes.io/hostname"
        containers:
        - env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: PATRONI_KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: PATRONI_KUBERNETES_LABELS
            value: '{"cluster-name": "${NAME}-${APP_GROUP}-${TAG_NAME}", "app.kubernetes.io/name": "patroni"}'
          - name: PATRONI_SUPERUSER_USERNAME
            valueFrom:
              secretKeyRef:
                key: superuser-username
                name: ${NAME}-${APP_GROUP}-${TAG_NAME}-secret
          - name: PATRONI_SUPERUSER_PASSWORD
            valueFrom:
              secretKeyRef:
                key: superuser-password
                name: ${NAME}-${APP_GROUP}-${TAG_NAME}-secret
          - name: PATRONI_REPLICATION_USERNAME
            valueFrom:
              secretKeyRef:
                key: replication-username
                name: ${NAME}-${APP_GROUP}-${TAG_NAME}-secret
          - name: PATRONI_REPLICATION_PASSWORD
            valueFrom:
              secretKeyRef:
                key: replication-password
                name: ${NAME}-${APP_GROUP}-${TAG_NAME}-secret
          - name: APP_USER
            valueFrom:
              secretKeyRef:
                key: DATABASE_USERNAME
                name: ${NAME}-${APP_GROUP}-${TAG_NAME}-secret
          - name: APP_PASSWORD
            valueFrom:
              secretKeyRef:
                key: DATABASE_PASSWORD
                name: ${NAME}-${APP_GROUP}-${TAG_NAME}-secret
          - name: APP_DATABASE
            valueFrom:
              secretKeyRef:
                key: DATABASE_NAME
                name: ${NAME}-${APP_GROUP}-${TAG_NAME}-secret
          - name: PATRONI_SCOPE
            value: ${NAME}-${APP_GROUP}-${TAG_NAME}
          - name: PATRONI_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: PATRONI_LOG_LEVEL
            value: WARNING
          - name: PATRONI_POSTGRESQL_DATA_DIR
            value: /home/postgres/pgdata/pgroot/data
          - name: PATRONI_POSTGRESQL_PGPASS
            value: /tmp/pgpass
          - name: PATRONI_POSTGRESQL_LISTEN
            value: 0.0.0.0:5432
          - name: PATRONI_RESTAPI_LISTEN
            value: 0.0.0.0:8008
          image: ${IMAGE_REGISTRY}/${IMAGE_STREAM_NAMESPACE}:${IMAGE_STREAM_TAG}
          # Because we are using image reference to a tag, we need to always pull the image otherwise
          #   we end up with outdated/out-of-sync image depending on the node where it is running
          imagePullPolicy: Always
          imagePullSecrets: artifacts-default-rbehd
          name: postgresql
          securityContext:
            allowPrivilegeEscalation: true
          ports:
          - containerPort: 8008
            protocol: TCP
          - containerPort: 5432
            protocol: TCP
          resources:
            requests:
              cpu: ${CPU_REQUEST}
              memory: ${MEMORY_REQUEST}
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          readinessProbe:
            initialDelaySeconds: 10
            timeoutSeconds: 40
            successThreshold: 1
            failureThreshold: 4
            exec:
              command:
                - /usr/share/scripts/patroni/health_check.sh
          volumeMounts:
          - mountPath: /home/postgres/pgdata
            name: postgresql
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccountName: ${NAME}-${APP_GROUP}-${TAG_NAME}
        terminationGracePeriodSeconds: 0
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        annotations:
          volume.beta.kubernetes.io/storage-class: ${STORAGE_CLASS}
        labels:
          app: ${NAME}-${APP_GROUP}-${TAG_NAME}
        name: postgresql
      spec:
        storageClassName: ${STORAGE_CLASS}
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${PVC_SIZE}

- kind: PodDisruptionBudget
  apiVersion: policy/v1
  metadata:
    name: "${NAME}-${APP_GROUP}-${TAG_NAME}-pdb"
    labels:
      app: "${NAME}-${APP_GROUP}-${TAG_NAME}"
      app-group: "${APP_GROUP}"
      template: patroni-pgsql-persistent
  spec:
    minAvailable: 1
    selector:
      matchLabels:
        statefulset: "${NAME}-${APP_GROUP}-${TAG_NAME}"

parameters:
- name: NAME
  displayName: Application Name
  value: patroni-pg12

- name: APP_GROUP
  displayName: The application group name.
  value: digmkt

- name: TAG_NAME
  displayName: The environment tag name (dev/test/prod).
  value: prod

- name: REPLICAS
  displayName: REPLICAS
  description: The number of statefulSet replicas to use.
  value: '3'

- description: Starting amount of CPU the container can use.
  displayName: CPU REQUEST
  name: CPU_REQUEST
  value: '60m'

- description: Maximum amount of CPU the container can use.
  displayName: CPU Limit
  name: CPU_LIMIT
  value: '120m'

- description: Starting amount of memory the container can use.
  displayName: Memory Request
  name: MEMORY_REQUEST
  value: 220Mi

- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  value: 660Mi

- description: The OpenShift Namespace where the patroni and postgresql ImageStream
    resides.
  displayName: ImageStream Namespace
  name: IMAGE_STREAM_NAMESPACE
  value: bcgov-docker-local/patroni-postgres

- name: IMAGE_STREAM_TAG
  description: Patroni ImageTag
  value: 2.0.1-12.4-latest

- description: The size of the persistent volume to create.
  displayName: Persistent Volume Size
  name: PVC_SIZE
  value: 8Gi

- name: STORAGE_CLASS
  value: netapp-block-standard

- name: IMAGE_REGISTRY
  value: artifacts.developer.gov.bc.ca
