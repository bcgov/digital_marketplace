---
kind: Template
apiVersion: v1
metadata:
  annotations:
    description: Deployment template for a PostgreSQL server with persistent storage.
    tags: "${NAME}-${APP_GROUP}-${TAG_NAME}"
  name: "${NAME}-deploy"

objects:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${NAME}-${APP_GROUP}-${TAG_NAME}"
    generation: 1
    labels:
      app: "${NAME}-${APP_GROUP}-${TAG_NAME}"
      app-group: "${APP_GROUP}"
      template: "${NAME}-deploy"
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      activeDeadlineSeconds: 21600
    replicas: 1
    test: false
    selector:
      name: "${NAME}-${APP_GROUP}-${TAG_NAME}"
    template:
      metadata:
        labels:
          name: "${NAME}-${APP_GROUP}-${TAG_NAME}"
      spec:
        volumes:
        - name: "${NAME}-${APP_GROUP}-${TAG_NAME}-volume"
          persistentVolumeClaim:
            claimName: "${NAME}-${APP_GROUP}-${TAG_NAME}-data"
        containers:
        - name: "${NAME}-${APP_GROUP}-${TAG_NAME}"
          image: "image-registry.openshift-image-registry.svc:5000/openshift/postgresql:10"
          ports:
          - containerPort: 5432
            protocol: TCP
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: "${NAME}-${APP_GROUP}-${TAG_NAME}-secret"
                key: DATABASE_USERNAME

          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${NAME}-${APP_GROUP}-${TAG_NAME}-secret"
                key: DATABASE_PASSWORD

          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: "${NAME}-${APP_GROUP}-${TAG_NAME}-secret"
                key: DATABASE_NAME

          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
          volumeMounts:
          - name: "${NAME}-${APP_GROUP}-${TAG_NAME}-volume"
            mountPath: "/var/lib/pgsql/data"
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities: {}
            privileged: false
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler

- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${NAME}-${APP_GROUP}-${TAG_NAME}-data"
    labels:
      app: "${NAME}-${APP_GROUP}-${TAG_NAME}"
      app-group: "${APP_GROUP}"
      template: "${NAME}-deploy"
  spec:
    storageClassName: "${PERSISTENT_VOLUME_CLASS}"
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${PERSISTENT_VOLUME_SIZE}"

- kind: Secret
  apiVersion: v1
  metadata:
    name: "${NAME}-${APP_GROUP}-${TAG_NAME}-secret"
    labels:
      app: "${NAME}-${APP_GROUP}-${TAG_NAME}"
      app-group: "${APP_GROUP}"
      template: "${NAME}-deploy"
  stringData:
    DATABASE_PASSWORD: "${POSTGRESQL_PASSWORD}"
    DATABASE_ADMIN_PASSWORD: "${POSTGRESQL_ADMIN_PASSWORD}"
    DATABASE_NAME: "${POSTGRESQL_DATABASE}"
    DATABASE_USERNAME: "${POSTGRESQL_USER}"
    DATABASE_PORT: "${POSTGRESQL_PORT}"
  type: Opaque

- kind: Service
  apiVersion: v1
  metadata:
    name: "${NAME}-${APP_GROUP}-${TAG_NAME}"
    labels:
      app: "${NAME}-${APP_GROUP}-${TAG_NAME}"
      app-group: "${APP_GROUP}"
      template: "${NAME}-deploy"
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
  spec:
    ports:
    - name: "${NAME}-${APP_GROUP}-${TAG_NAME}"
      protocol: TCP
      port: 5432
      targetPort: 5432
    selector:
      name: "${NAME}-${APP_GROUP}-${TAG_NAME}"
    type: ClusterIP
    sessionAffinity: None

parameters:
- name: NAME
  displayName: Name
  required: true
  value: postgresql

- name: APP_GROUP
  displayName: App Group
  required: true
  value: digmkt

- name: TAG_NAME
  displayName: Environment TAG name
  required: true
  value: dev

- name: MEMORY_LIMIT
  displayName: Memory Limit
  required: true
  value: 512Mi

- name: PERSISTENT_VOLUME_SIZE
  displayName: Persistent Volume Size
  required: true
  value: 2Gi

- name: PERSISTENT_VOLUME_CLASS
  displayName: Persistent Volume Class name
  required: false
  value: netapp-block-standard

- name: POSTGRESQL_PASSWORD
  displayName: PostgreSQL Connection Password
  description: Password for the PostgreSQL connection user.  Needs to be basee64 encoded/
  required: true
  generate: expression
  from: "[a-zA-Z0-9]{16}"

- name: POSTGRESQL_ADMIN_PASSWORD
  displayName: PostgreSQL Connection Admin Password
  description: Password for the PostgreSQL connection user.  Needs to be basee64 encoded/
  required: true
  generate: expression
  from: "[a-zA-Z0-9]{16}"

- name: POSTGRESQL_DATABASE
  displayName: Database Name
  required: true
  value: dig-mkt

- name: POSTGRESQL_USER
  displayName: Database User
  description: A valid database user used by the service.
  required: true
  value: dig-mkt

- name: POSTGRESQL_PORT
  displayName: Database host port
  description: A valid database host port used by the service.
  required: true
  value: '5432'
